#==========================================================================
# Description: Build Flash Images for efused devices
# Copyright (C) 2025 https://github.com/dd-ray/amlogic-s9xxx-armbian
#==========================================================================

name: Build Flash Images

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      source_release_tag:
        description: "从哪个release获取源镜像"
        required: false
        default: "Armbian_bookworm_save_2025.06"
        type: string
      build_device:
        description: "选择构建设备"
        required: false
        default: "efused-wxy-oec"
        type: choice
        options:
          - efused-wxy-oec
      flash_release_tag:
        description: "Flash镜像发布标签"
        required: false
        default: "Armbian_debian"
        type: string

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build-flash-images:
    runs-on: ubuntu-22.04
    if: ${{ github.event.repository.owner.id }} == ${{ github.event.sender.id }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 1

      - name: 初始化构建环境
        id: init
        run: |
          echo "构建环境初始化..."
          sudo apt-get update -qq
          sudo apt-get install -qq -y gdisk parted zip unzip curl wget jq tar
          
          # 设置工作目录
          FLASH_WORKSPACE="${GITHUB_WORKSPACE}/flash_build"
          mkdir -p "${FLASH_WORKSPACE}"
          echo "FLASH_WORKSPACE=${FLASH_WORKSPACE}" >> $GITHUB_OUTPUT
          echo "BUILD_DATE=$(date +"%Y.%m.%d.%H%M")" >> $GITHUB_OUTPUT
          echo "RELEASE_TAG=${{ inputs.flash_release_tag || 'Armbian_debian' }}" >> $GITHUB_OUTPUT
          echo "SOURCE_TAG=${{ inputs.source_release_tag || 'Armbian_bookworm_save_2025.06' }}" >> $GITHUB_OUTPUT

      - name: 下载源镜像文件
        id: download
        run: |
          echo "从 release ${{ steps.init.outputs.SOURCE_TAG }} 下载源镜像..."
          
          # 获取release信息
          RELEASE_INFO=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ steps.init.outputs.SOURCE_TAG }}")
          
          # 根据设备类型选择要下载的镜像
          DEVICE_PATTERN="${{ inputs.build_device || 'efused-wxy-oec' }}"
          
          if [[ "${DEVICE_PATTERN}" == "efused-wxy-oec" ]]; then
            # 获取所有匹配设备的镜像文件，并按日期排序选择最新的
            echo "查找所有匹配 '${DEVICE_PATTERN}' 的镜像文件..."
            
            # 获取所有匹配的文件名和对应的下载链接
            MATCHING_FILES=$(echo "${RELEASE_INFO}" | jq -r '.assets[] | select(.name | contains("efused-wxy-oec") and (endswith(".img.gz") or endswith(".img.xz") or endswith(".img"))) | "\(.name)|\(.browser_download_url)"')
            
            if [[ -z "${MATCHING_FILES}" ]]; then
              echo "未找到匹配的镜像文件"
              exit 1
            fi
            
            echo "找到的镜像文件："
            echo "${MATCHING_FILES}"
            
            # 解析文件名中的日期并找到最新的
            LATEST_FILE=""
            LATEST_DATE=""
            LATEST_URL=""
            
            while IFS='|' read -r filename download_url; do
              # 从文件名中提取日期 (格式: YYYY.MM.DD)
              DATE_PART=$(echo "${filename}" | grep -oE '[0-9]{4}\.[0-9]{2}\.[0-9]{2}' | tail -1)
              
              if [[ -n "${DATE_PART}" ]]; then
                echo "文件: ${filename} -> 日期: ${DATE_PART}"
                
                # 将日期转换为可比较的格式 (YYYYMMDD)
                COMPARABLE_DATE=$(echo "${DATE_PART}" | sed 's/\.//g')
                
                if [[ -z "${LATEST_DATE}" ]] || [[ "${COMPARABLE_DATE}" > "${LATEST_DATE}" ]]; then
                  LATEST_DATE="${COMPARABLE_DATE}"
                  LATEST_FILE="${filename}"
                  LATEST_URL="${download_url}"
                fi
              else
                echo "警告: 文件 ${filename} 中未找到日期信息"
              fi
            done <<< "${MATCHING_FILES}"
            
            if [[ -z "${LATEST_FILE}" ]]; then
              echo "未找到带有日期信息的镜像文件"
              exit 1
            fi
            
            FILENAME="${LATEST_FILE}"
            DOWNLOAD_URL="${LATEST_URL}"
            ORIGINAL_DATE="${LATEST_DATE:0:4}.${LATEST_DATE:4:2}.${LATEST_DATE:6:2}"
            
            echo "选择最新镜像: ${FILENAME} (日期: ${ORIGINAL_DATE})"
          else
            # 下载所有支持的设备镜像
            echo "暂时只支持 efused-wxy-oec 设备"
            exit 1
          fi
          
          if [[ -z "${DOWNLOAD_URL}" || "${DOWNLOAD_URL}" == "null" ]]; then
            echo "未找到匹配的镜像文件"
            exit 1
          fi
          
          echo "下载文件: ${FILENAME}"
          echo "下载链接: ${DOWNLOAD_URL}"
          
          # 下载文件
          cd "${{ steps.init.outputs.FLASH_WORKSPACE }}"
          wget -O "${FILENAME}" "${DOWNLOAD_URL}"
          
          echo "SOURCE_IMAGE=${FILENAME}" >> $GITHUB_OUTPUT
          echo "SOURCE_PATH=${{ steps.init.outputs.FLASH_WORKSPACE }}/${FILENAME}" >> $GITHUB_OUTPUT

      - name: 构建Flash镜像
        id: build_flash
        run: |
          echo "开始构建Flash镜像..."
          
          cd "${{ steps.init.outputs.FLASH_WORKSPACE }}"
          
          # 运行Flash镜像构建脚本
          sudo bash "${GITHUB_WORKSPACE}/build-armbian/create-flash-image.sh" \
            "${{ steps.download.outputs.SOURCE_PATH }}" \
            "${{ inputs.build_device || 'efused-wxy-oec' }}" \
            "${{ steps.init.outputs.FLASH_WORKSPACE }}"
          
          # 查找生成的Flash镜像
          FLASH_IMAGE=$(ls Flash_*.zip | head -1)
          
          if [[ -z "${FLASH_IMAGE}" ]]; then
            echo "Flash镜像构建失败"
            exit 1
          fi
          
          echo "构建完成: ${FLASH_IMAGE}"
          echo "FLASH_IMAGE=${FLASH_IMAGE}" >> $GITHUB_OUTPUT
          echo "FLASH_PATH=${{ steps.init.outputs.FLASH_WORKSPACE }}/${FLASH_IMAGE}" >> $GITHUB_OUTPUT
          
          # 生成SHA256校验文件
          sha256sum "${FLASH_IMAGE}" > "${FLASH_IMAGE}.sha256"
          echo "SHA256_FILE=${FLASH_IMAGE}.sha256" >> $GITHUB_OUTPUT

      - name: 发布Flash镜像到Release
        uses: ncipollo/release-action@main
        with:
          tag: ${{ steps.init.outputs.RELEASE_TAG }}
          name: ${{ steps.init.outputs.RELEASE_TAG }}
          body: |
            ## 📦 Flash 镜像发布

            **构建信息：**
            - 源镜像: ${{ steps.download.outputs.SOURCE_IMAGE }}
            - Flash镜像: ${{ steps.build_flash.outputs.FLASH_IMAGE }}
            - 设备类型: ${{ inputs.build_device || 'efused-wxy-oec' }}
            - 构建时间: ${{ steps.init.outputs.BUILD_DATE }}

            ## 📋 分区结构

            Flash镜像包含完整的7个分区结构：

            | 分区号 | 分区名 | 大小 | 描述 |
            |--------|--------|------|------|
            | 1 | uboot | 4MB | U-Boot 分区 (原厂) |
            | 2 | misc | 4MB | 杂项分区 (原厂) |
            | 3 | boot | 64MB | 启动分区 (原厂) |
            | 4 | kernel | 64MB | 内核分区 (原厂) |
            | 5 | env | 32MB | 环境变量分区 (原厂) |
            | 6 | boot | 512MB | Armbian 启动分区 |
            | 7 | rootfs | 剩余空间 | Armbian 根文件系统 |

            ## 💡 使用方法

            1. **下载文件**: 下载Flash镜像zip文件和对应的SHA256校验文件
            2. **验证完整性**: 
               ```bash
               sha256sum -c *.sha256
               ```
            3. **解压镜像**: 
               ```bash
               unzip ${{ steps.build_flash.outputs.FLASH_IMAGE }}
               ```
            4. **刷写到设备**: 使用 `rkdevtool` 或类似工具写入到设备Flash存储

            ## ⚠️ 重要提醒

            - **备份数据**: Flash镜像包含完整的7个分区，会覆盖所有原有数据
            - **确认设备**: 确保镜像适用于您的设备型号，错误的镜像可能导致设备无法启动  
            - **断电风险**: 刷写过程中不要断电或拔除设备
            - **原厂固件**: 建议刷写前备份原厂固件以便恢复

            ---
            
            🔧 **技术支持**: [Issues](https://github.com/${{ github.repository }}/issues) | 📖 **详细文档**: [README](https://github.com/${{ github.repository }}/blob/main/README-Flash-Build.md)
          artifacts: "${{ steps.init.outputs.FLASH_WORKSPACE }}/${{ steps.build_flash.outputs.FLASH_IMAGE }},${{ steps.init.outputs.FLASH_WORKSPACE }}/${{ steps.build_flash.outputs.SHA256_FILE }}"
          allowUpdates: true
          updateOnlyUnreleased: false
          replacesArtifacts: true
          makeLatest: false
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 清理工作空间
        if: always()
        run: |
          echo "清理工作空间..."
          sudo rm -rf "${{ steps.init.outputs.FLASH_WORKSPACE }}" 2>/dev/null || true

      - name: 构建总结
        if: success()
        run: |
          echo "🎉 Flash镜像构建成功！"
          echo ""
          echo "📦 构建信息："
          echo "  - 源镜像: ${{ steps.download.outputs.SOURCE_IMAGE }}"
          echo "  - Flash镜像: ${{ steps.build_flash.outputs.FLASH_IMAGE }}"
          echo "  - 设备类型: ${{ inputs.build_device || 'efused-wxy-oec' }}"
          echo "  - Release: ${{ steps.init.outputs.RELEASE_TAG }}"
          echo ""
          echo "💡 使用说明："
          echo "  1. 从 https://github.com/${{ github.repository }}/releases/tag/${{ steps.init.outputs.RELEASE_TAG }} 下载Flash镜像"
          echo "  2. 解压zip文件得到img镜像"
          echo "  3. 使用rkdevtool写入到设备Flash存储"
          echo ""
          echo "⚠️  注意：Flash镜像包含完整的7个分区，刷入前请备份重要数据！" 